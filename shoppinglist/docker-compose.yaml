version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      DB_HOST: db                  # Hostname des db-Service (PostgreSQL)
      DB_PORT: 5432
      DB_USER: myuser              # Benutzername für DB-Zugang
      DB_PASSWORD: password        # Passwort für DB-Zugang
      DB_NAME: appdb               # Name der DB
      PORT: ${PORT:-8080}          # Standardport 8080, falls keine PORT-Variable gesetzt ist
    ports:
      - "8080:8080"                # Exponiert den Container auf Port 8080 des Hosts
    container_name: go_app
    networks:
      - app-network
    depends_on:
      db:                           # Wartet auf db, aber nicht direkt auf Healthcheck
        condition: service_healthy  # Wartet auf den erfolgreichen Healthcheck der db

  db:
    image: postgres:13            # Beispiel-Image für PostgreSQL
    container_name: postgres_db
    environment:
      POSTGRES_USER: myuser       # Benutzername für die Datenbank
      POSTGRES_PASSWORD: password # Passwort für den Benutzer
      POSTGRES_DB: appdb          # Name der Datenbank
    ports:
      - "5432:5432"               # Exponiert den Datenbank-Container auf Port 5432 des Hosts
    networks:
      - app-network
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # Mount das init.sql-Skript
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "myuser", "-d", "appdb"]
      interval: 10s               # Alle 10 Sekunden wird der Healthcheck durchgeführt
      retries: 5                  # 5 Versuche, bevor der Container als unhealthy markiert wird
      timeout: 5s                 # Wie lange Docker auf eine Antwort wartet
      start_period: 30s           # Warte 30 Sekunden nach dem Start, bevor der Healthcheck ausgeführt wird
  frontend:
    image: maeddes/frontendflask:hse24
    environment:
      API_URL: "https://supreme-robot-wwv9r69w59j2grwp-8080.app.github.dev/api/shopping"  # Use the API URL for communication between containers
    ports:
    - "5000:5000"
    depends_on:
    - app


networks:
  app-network:
    driver: bridge                # Standard-Bridge-Netzwerk für die Kommunikation der Container
